Report

https://github.com/bizzlebin/team_6/blob/master/team/report.txt

***

By Jeremiah Thomas, et al

***

Created 2021-04-11

Updated 2021-04-19

+++
Description

The project report for Team 6's project and app, GlucoCheck; uses template provided by teacher.

+++
0. [Title Page]

Glucocheck

Submitted by:
Jeremiah Thomas, Computer Programming Student (Scrum Master)
Stuart Watson, Computer Programming Student (Product Owner)
Anjali Sharma, Data Science Student (Developer)
Elmehdi Mnajli, Data Science Student (Developer)
Kai McGregor, Computer Programming Student (Developer)

Instructor:
Susan Rizzo

Industry Mentors:
Mike Fitzpatrick, IHS Markit Software Developer
William Calhoun, IHS Markit Executive Director

???, 2021

Submitted in partial fulfillment of the requirements for CSC 289 Capstone Project

Programming & Information Sciences Department
Information Technology Division
Wake Technical Community College, Raleigh, NC 27709

+++
1. Introduction

+++
2. Project Plan

===
2.1. Project Description

Team 6 will be creating GlucoCheck, a program to track glucose and insulin levels. This program will offer a secure, web-based, DB-backed UI for users to create an account, log in, and input health data. Users will be able to visualize this data, as well as receive different dietary recommendations based upon it.

===
2.2. Project Background

The biggest challenge will be providing a secure, easy-to-use interface for customers to be able to interpret their health data. While there is no shortage of tools to measure glucose, few of those tools provide data visualization or personalized dietary recommendations that allow the customer to go from numbers to knowledge. This will be a vital learning experience for the team because customers very rarely want data, or software, or even logins: they want concrete answers, simplifications, and convenience. By applying programming techniques to a real-world problem in the healthcare industry, members will be able to understand how to make use of their technical knowledge in a supporting role for a useful, profitable business.

===
2.3. Project Goals

• Enable my customers to sign up and login securely during 1st Sprint.
• Enable my customers to input and review their health data during 1st Sprint.
• Enable my customers to visualize and understand their health data during 2nd Sprint.
• Enable my customers to use the app on any web browser during 2nd Sprint.
• Enable my customers to receive custom dietary recommendations during 3rd Sprint.
• Enable my customers to access instructions and help documentation during 3rd Sprint.
• Enable my customers to export health data during 3rd Sprint.

---
2.3.1. Resources Required

• Customer UI testing
• Sample health data

---
2.3.2. Project Constraints

• Basic medical knowledge
• Data visualization experience
• Customer safety and regulations
• USDA food data server rate limits

===
2.4. Product Vision Statement

GlucoCheck
For diabetics and their caregivers
Who need help monitoring, tracking, and managing blood sugar levels and stopping dietary glucose spikes,
The program GlucoCheck
Is a simple, easy-to-use, and clear web-based personal logbook
That allows even non-professionals to log in from anywhere, input insulin and glucose levels, visualize the changes over time, get reminders, and receive dietary recommendations.
Unlike competitors—such as Omnipod and Medtronic, which focus heavily on bolus doses and medical intervention to manage diabetes—
Our product also offers lifestyle changes and USDA/FDA-approved meal ideas for controlling blood sugar spikes with a more holistic approach that treats the whole person.

+++
3. Project Execution

===
3.1. Methods

Using the Django framework and coordinating code with Git and GitHub, our team created a viable Python 3 web app backed by an SQLite database for storing, graphing, and providing context for diabetes health data provided by users. This required a heavy amount of work from the Scrum Master and Product Owner at the beginning of the project, while the development team's work steadily increased during the sprints. Over the course of 3 sprints, features were added and the app grew into a more complete and competitive product.

During sprint 1, our team finished laying the groundwork for the project in terms of communication and collaboration tools. It was also during this sprint that we were able to deal with our most crippling constraints: basic medical knowledge, regulations, and information on food data API access. Our scrum master was able to fill out a series of legal release forms for the food data, but ultimately the server was not set up for the sort of access our team needed. We were able to tackle regulatory issues with a little research and some generic, HIPAA-tested disclaimers. Finally, our lead developer Kai provided textual summaries and Q&A for the team regarding diabetes, allowing us all a window into the condition and the basic knowledge to move forward. All of this was enough to get our app's skeleton built.

By the start of sprint 2, our team had completed the basic website and sign-up process but still needed to address the final constraint: visualization. Since no one had much experience with either Python or JS-based graphing libraries, we were able to solicit feedback from our mentors to help us arrive at a solution. It was also during this sprint that we started to run up against more personal challenges, delving into more and more unknown algorithms and complex chains of logic. Though the work was difficult, we finished the sprint with working both the ability to input health data and meaningfully visualize it.

For sprint 3, we chose to focus on the next-most-important features that would give our produce a competitive advantage: user-facing definitions, legally-safe health advice, and a public API for uploading health data either in bulk or from a device. These user stories brought us back into obscure territory, but we continued to learn new libraries, more complex algorithms, and even how to make better test data. By the end, we we able to implement all 3 of these new features.

Due to time constraints and the difficulty of the work involved, every sprint after the first saw a major reduction in user stories—and story points—completed. For example, during sprint 2, our team had hoped to do extended browser testing. Even though this user story had only 2 story point allotted, we ended up postponing the story in order to focus on features that would add more direct value to the customer; this was based on advice from our mentors. Though we did not reattempt the story in sprint 3, our evolving definition of done obviated the need for much of the testing as a separate story.

===
3.2. Project Management

The form of project management we used during application development was scrum. Though all of our team members had some familiarity with the framework, none of us had used it in a pure form. But because of the structure of the project and all the amazing stories we'd heard about scrum, we adopted it as closely as we were able to.

For our artifacts, such as sprint backlogs, we stuck exclusively to plaintext hosted on GitHub. This allowed everyone to easily update, read, and upload all changes without any specialized tools and encouraged transparency among team members who were otherwise only able to meet with each other virtually. Extra support for the artifacts, as well as the increment codebase, was provided via our Slack workspace, where we were able to post questions and answers at any time of day or night; this was especially important for our team because of scheduling issues.

The scrum ceremonies were more difficult to carry out online and involved using the videoconferencing features of Microsoft Teams. This was not able to completely replicate the environment of an in-person daily scrum, but the regularity of our twice-weekly "standups" did help the team stay focused on the goal and continue to develop interpersonal connections. The larger ceremonies, such as sprint reviews and retrospectives, were also conducted on Teams, and we were able to make extensive use of screen sharing—both for presentation purposes and also for live group editing of scrum artifacts and project documentation.

In accordance with our understanding of scrum, we did not mandate any specific processes in addition to scrum. However, the scrum master did provide a wealth of optional formats and processes for everything from filenames to metadata to docstrings. All of these tools allowed the team's code and documentation to better integrate. We also used a plugin for Slack called Poker Planner, which was invaluable for complexity estimation and sprint planning.

===
3.3. Artifacts

While a complete presentation of all our team's artifacts—to say nothing of their various states—is not possible, we've provided a brief sampling to highlight just how simple and effective our plaintext formats are for implementing everything from a backlog to a retrospective.

---
3.3.1. Product Backlog

[pic]

---
3.3.2. Sprint Backlog

[pic]

---
3.3.3. sprint Retrospective

[pic]

===
3.4. Results

By the end of 3 sprints, we fell far short of some of the goals we'd hoped to achieve. Some of these difficulties were brought on by forces outside of our control, such as the copyright and legal issues surrounding us implementing any robust form of meal planning (see request form, below—one of many steps in that long, winding path to rejection). Other challenges were brought on by the scrum framework itself, which—despite its claims—created some unbreakable silos in our group and prevented valuable work from being done because of strict, role-based boundaries. Further roadblocks were truly our own: we lacked "real life" working experience with most of the tools, libraries, and even algorithms we needed to implement in order to create our app.

[pic]

Yet with the continued support of our mentors, we were able to meet these challenges not as problems but opportunities. We were forced to confront questions such as feature priority, marketability, and usability. We had to rethink our definition of done (see current definition, below). And we had to cut some features off completely, like exporting health data—it would not be too difficult to implement in the future, but there was no time to research and/or develop our own data format. All of this made our app—and our team—stronger.

[pic]

By the end of the project, we completed a total of 10 user stories (38 points): 5 in the 1st (15 points), 2 in the 2nd (7 points), and 3 in the 3rd (16 points). The app has working sign-up and login, supports multiple forms of data entry, and supports very nice visualizations. The custom artwork is also stunning (see example, below)—this was not included as part of any acceptance criteria and did divert some resources away form the stories, but it was a good tradeoff because it will help with customer acquisition and retention. Overall, the app met many of our goals and went a long way towards implementing our vision.

[pic]

+++
4. Conclusion/Summary

+++
5. Reflections

+++
6. Acknowledgments